[["handling-data.html", "9 Handling data 9.1 Extracting rows and columns 9.2 dplyr", " 9 Handling data 9.1 Extracting rows and columns After we have loaded/imported our data we want to be able to work with it. Typical operations are to extract specific columns, rows, or values, and to add new columns and rows. Recall that columns run top to bottom, while rows run left to right. In addition, columns will sometimes have names: names(data) ## [1] &quot;site&quot; &quot;experiment&quot; &quot;length&quot; &quot;width&quot; &quot;height&quot; To extract a column, we use the symbol $ followed by the name of the column (in this case site): data$site ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 If the columns do not have names you can specify the column you require by using data[,n], where n is the number of column you require (beginning from the left). When no number precedes the ,n this means all rows: data[,1] ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 To extract row n, and all the columns, we use data[n,]. Row 1 (all columns) is extracted as: data[1,] ## site experiment length width height ## 1 1 1 2.2 1.3 9.6 If we want one specific value, data[n,m] returns the value in row n and column m: data[1,2] ## [1] 1 Furthermore, data[,n:m] returns all the rows for columns n to m: data[2:4,] ## site experiment length width height ## 2 1 2 2.1 2.2 7.6 ## 3 1 3 2.7 1.5 2.2 ## 4 2 1 3.0 4.5 1.5 while data[n:m,] returns all the columns for rows n to m: data[,2:3] ## experiment length ## 1 1 2.2 ## 2 2 2.1 ## 3 3 2.7 ## 4 1 3.0 ## 5 2 3.1 ## 6 3 2.5 ## 7 1 1.9 ## 8 2 1.1 ## 9 3 3.5 ## 10 1 2.9 ## 11 2 4.5 ## 12 3 1.2 Note that in the two examples above n must be bigger than m. This method is called slicing. This are simple commands to work with data, but as data scientists frequently want to work with data in this way, the dplyr package was created to handle data more efficiently. 9.2 dplyr We recommend using dplyr to handle data as the commands are concise, making the code easier to read and write. Install and load the dplyr R package. The dplyr package contains several different function that are very useful when manipulating and cleaning large datasets. We will be highlighting the use of the select(), mutate(), length(), arrange(), and filter(). 9.2.1 Selecting a column The command select(data, length) selects the length column of the dataframe data: select(data, length) ## length ## 1 2.2 ## 2 2.1 ## 3 2.7 ## 4 3.0 ## 5 3.1 ## 6 2.5 ## 7 1.9 ## 8 1.1 ## 9 3.5 ## 10 2.9 ## 11 4.5 ## 12 1.2 This achieves the same result as the data$length command we learned in the previous section. 9.2.2 Adding a new column There are several different methods to add new columns to a data set in R, but when using the dplyr package, the function mutate() is appropriate. Below we create a new column called site_double that is equal to the site column times 2. data2 = mutate(data, site_double = site * 2) We can see that data2 has a new column called site_double. 9.2.3 Sorting the data The arrange() function orders the rows of a data frame by the values in a specific column. Below we arrange data by increasing order of the width column.: arrange(data, width) ## site experiment length width height ## 1 3 2 1.1 0.5 2.3 ## 2 1 1 2.2 1.3 9.6 ## 3 1 3 2.7 1.5 2.2 ## 4 3 1 1.9 1.8 4.5 ## 5 3 3 3.5 2.0 7.5 ## 6 1 2 2.1 2.2 7.6 ## 7 4 1 2.9 2.7 3.2 ## 8 2 3 2.5 2.8 3.0 ## 9 2 2 3.1 3.1 4.0 ## 10 2 1 3.0 4.5 1.5 ## 11 4 2 4.5 4.8 6.5 ## 12 4 3 1.2 NA 2.7 9.2.4 Filtering data The filter() function is used to subset a data frame, retaining all rows that satisfy your conditions. For a row to be retained, TRUE must be produced for all conditions. To extract all rows of data with length greater than 7 cm: filter(data, height &gt; 7) ## site experiment length width height ## 1 1 1 2.2 1.3 9.6 ## 2 1 2 2.1 2.2 7.6 ## 3 3 3 3.5 2.0 7.5 We can also filter with two (or more) conditions. We use &amp; (meaning and) if we require both conditions to be satisfied, or | (meaning or) if we require at least one condition is satisfied. Below, we filter the data so that data3 contains only plants that have length greater than 8 cm and width greater than 5 cm. data3=filter(data, height &gt;8 &amp; width &gt; 5) However, no plants met both conditions so data3 is empty. We can filter to retain plants from Site 1 or Site 3: filter(data, site == 1 |site == 3) ## site experiment length width height ## 1 1 1 2.2 1.3 9.6 ## 2 1 2 2.1 2.2 7.6 ## 3 1 3 2.7 1.5 2.2 ## 4 3 1 1.9 1.8 4.5 ## 5 3 2 1.1 0.5 2.3 ## 6 3 3 3.5 2.0 7.5 In R, == evaluates whether something is TRUE or FALSE, while = assigns the value on the right hand side to the variable on the left hand side. TRY IT In the Console try the following: # Assigns x the value 0 x = 0 # Evaluates TRUE if x = 0 (TRUE since we assigned x=0 on the above line of code) x == 0 ## [1] TRUE # Evalues TRUE if x = 1 (FALSE since we assigned x=0 on the first line of code) x == 1 ## [1] FALSE Therefore, when we write site == 1, TRUE is returned when the value of site is 1, and these rows are retained in the output. If we wrote site = 1, then R would try to assign the variable site with the value 1, which would return an error message since the second argument of the filter() function requires a logical statement that evaluates as TRUE or FALSE and site = 1 assigns a value; it is not a logical statement. 9.2.5 Removing NA entries in data Often experimental data is not as neat or pretty as example data. There is often missing data, or empty or NA entries which may cause issues in graphing or data analysis. R does not allow empty values, so empty values in .csv or .xlsx files are often converted to NA when these data are uploaded into R. Luckily, again the filter function has a solution to this! We can filter the data to remove rows with NULL or NA entries. #filter the data to remove rows with null values in the height column filter(data, !is.na(width)) ## site experiment length width height ## 1 1 1 2.2 1.3 9.6 ## 2 1 2 2.1 2.2 7.6 ## 3 1 3 2.7 1.5 2.2 ## 4 2 1 3.0 4.5 1.5 ## 5 2 2 3.1 3.1 4.0 ## 6 2 3 2.5 2.8 3.0 ## 7 3 1 1.9 1.8 4.5 ## 8 3 2 1.1 0.5 2.3 ## 9 3 3 3.5 2.0 7.5 ## 10 4 1 2.9 2.7 3.2 ## 11 4 2 4.5 4.8 6.5 Observe that row 12 of data has now been removed because it contained NA in the width column. To understand this command, note that is.na(x) returns TRUE if x = NA. The ! means ‘not’ and reverses the TRUE and FALSE outputs. We illustrate ! below: # 1 equal to 2 (FALSE) 1 == 2 ## [1] FALSE # 1 is not equal to 2 (TRUE) 1 != 2 ## [1] TRUE Recall, that filter() retains the rows that evaluate as TRUE: we wish to remove the rows with NA, so we need to write a command that evaluates these to FALSE. Therefore, we use !is.na(). "]]
