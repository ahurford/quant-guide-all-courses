[["handling-data.html", "9 Handling data 9.1 dplyr", " 9 Handling data After we have loaded/imported our data we want to be able to work with it. Typical operations are to extract specific columns, rows, or values, and to add new columns and rows. Recall that columns run top to bottom, while rows run left to right. In addition, columns will sometimes have names: names(data1) ## [1] &quot;weight&quot; &quot;NaCl.0.percent&quot; &quot;NaCl.0.9.percent&quot; &quot;NaCl.2.percent&quot; ## [5] &quot;NaCl.5.percent&quot; To extract a column, we use the symbol $ followed by the name of the column (in this case NaCl.0.percent): data1$NaCl.0.percent ## [1] NA NA NA NA If the columns do not have names you can specify the column you require by using data1[,n], where n is the number of column you require (beginning from the left). When no number precedes the ,n this means all rows: data1[,1] ## [1] &quot;initial&quot; &quot;final&quot; &quot;difference&quot; &quot;percent-change&quot; To extract row n, and all the columns, we use data1[n,]. Row 1 (all columns) is extracted as: data1[1,] ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA If we want one specific value, data1[n,m] returns the value in row n and column m: data1[1,2] ## [1] NA Furthermore, data1[,n:m] returns all the rows for columns n to m: data1[2:4,] ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA while data1[n:m,] returns all the columns for rows n to m: data1[,1:3] ## weight NaCl.0.percent NaCl.0.9.percent ## 1 initial NA NA ## 2 final NA NA ## 3 difference NA NA ## 4 percent-change NA NA Note that in the two examples above n must be bigger than m. This method is called slicing. This are simple commands to work with data, but as data scientists frequently want to work with data in this way, the dplyr package was created to handle data more efficiently. 9.1 dplyr We recommend using dplyr to handle data as the commands are concise, making the code easier to read and write. "]]
