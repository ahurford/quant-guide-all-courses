[
["index.html", "Quantitative skills for biology Chapter 1 Introduction", " Quantitative skills for biology Chapter 1 Introduction Amy will write this section Quantitative skills are important in biology. Quantitative skills include performing statistical analyses, using computer software to manage and reformat data, design experiments, understand graphs, vizualizing data, identify genes from DNA sequences, construct 3D models of protiens, and make phylogenies. Many of these tasks are now performed using computers, and elements of computer programming, statistics, and applied mathematics can be useful for professional biologists. Quantitative skills are being incorporated throughout the biology major. Why is this important Why have we made the choices we did (R, pedagogy citations) Biologists use a variety of tools and in recent years, the use of computers has become widespread. Many different softwares are used by biologists including Microsoft Office, R, Python, and ArcGIS. First year biology, will introduce you to using R to visualize data, although we note that many of the same end results could be generated using different software. Our choice of R is for the following reasons: R programming is a valued skill: citation. Reproducibility: Accessibility: R is free. No limits: while it is possible to need data visualization options or statistical analysis that are unavailable in Microsoft Excel this is rarely a problem in R: there is an R package for anything, from serious to fun). "],
["how-to-install-r-and-r-studio.html", "Chapter 2 How to install R and R Studio", " Chapter 2 How to install R and R Studio R can be installed from https://www.r-project.org/. If you have problems with installing R this same website provides advice on how to seek support. Give link out to Pirates Guide to R. R is a scripting language. R Studio is a graphical user interface (GUI) that facilitates R coding by providing buttons and menus to provide options for some commonly used commands. Download the free version RStudio Desktop from https://rstudio.com/products/rstudio/ Link out to Pirates Guide to R. "],
["finding-your-way-around-rstudio.html", "Chapter 3 Finding your way around RStudio 3.1 Source pane 3.2 Console pane 3.3 Enviornment/History pane 3.4 File/Plots/Packages/Help pane", " Chapter 3 Finding your way around RStudio R studio has 4 windows (also known as “panes”) that are inter-linked. The default layout is shown in Figure 3.1. You can move the layout of the panes and change their size and shape by clicking and dragging with your mouse along the window pane borders. The details of what happens in each pane are detailed below. Figure 3.1: Panes in RStudio. 3.1 Source pane This is where you create and edit R scripts. R scripts are just text files with a “.R” extension at the end of the filename. When you’ve written and saved a script, you can re-use it for future projects. So, before you start typing here, you should save the file under a new name. 3.2 Console pane On the surface, this looks a lot like the source pane, since it’s where you can also type code. However, it differs because there is a prompt (the “&gt;” symbol) and here the code is actually evaluated. TRY IT! type 5 + 5 in the console at the prompt and press “enter”. You’ll see the R gives the correct output (10). TIP you should try to type code in the source pane, so it gets saved. You can test it by clicking the “Run” button on the top of the source pane. TIP use the console to test code/debug, or do a quick analysis. If you want to see a previous line of code you types, press the up arrow to scorss through past comments, from most to least recent. 3.3 Enviornment/History pane This pane has several tabs, we’ll discuss each in turn. Environment tab This shows you the names of all data objects (e.g., vectors, matrices, dataframes) that you’ve defined in the current R session, along with information about the size of data objects. There are also clickable actions, like “Import data set”, which we’ll refer to later. History tab This shows you a history of all the code you’ve previously run in the console. 3.4 File/Plots/Packages/Help pane This pane also has a few tabs Files tab This tab gives you access to the file directory on your own computer. It’s a useful spot to set your working directory (see Chapter ??). Plots tab This tab lets you see all the plots (graphs) that you create. You can also uset the buttons at the top to zoom, and to export the graph as a PDF or jpeg file. Packages tab This tab shows a list of all the R packages installed on your computer (see chapter 5 for more on installing packages). It also indicates which are loaded with a check mark. Packages are add-on functions and datasets that you can add to your R installation. To install a package… Help tab This lets you get help with R functions. Type the name of the function in the search window (blank bar with the magnifying glass beside it). See Chapter 4 “Getting R help” for more details. "],
["help.html", "Chapter 4 Getting R help 4.1 Using R help 4.2 R “Cheatsheets” 4.3 R books 4.4 How to interpret R help files", " Chapter 4 Getting R help The first place most people go for R help is the “Help” tabe in the “Files/Plots/Packages/Help” pane on thue console (described in Chapter 4). Here you can do a search by topic/term using the search window at the top right. You can also click the “house” icon to go to the home menu for the help files and use the table of contents there to navigate to what you are looking for. 4.1 Using R help The hardest part about R help files is that at first they don’t seem that helpful, and to new R users, they seem to be written in code. However, all of the help pages are structured the same way, so once you learn how to de-code them, you’ll be well on your way. Below is an example of how to interpret R help files 4.2 R “Cheatsheets” Because R is open source software, there is also a culture of open access help. Several R programmers have made helpful “cheatSheets” that are worth printing off and hanging by your desk. Try this one by Tom Short for starters. 4.3 R books As with the cheatsheets, there are open access books out there (as well as expensive ones to buy). For beginners, “The Pirates Gude to R” by Nathaniel D. Phillips is HIGHLY recommended. You can access it here 4.4 How to interpret R help files R documentation follows the following format. As an example, we’ll use the screenshot below for a really simple statistical command (the t-test) to walk you through the R documentation. Numbers below correspond to the labels on the screenshot. header This simply gives the command for the thing you are trying to do, in R language Title This is a title of the function/command/tool in more plain language Description This section provides a short description of what the command does, written in reaonably plain language Usage This is where you see an example of R code that you use to execute the command (TIP you can tell what text in the help file is R code and what is other information by the font. Example code is in Courier font). Any example prefaced teh two hashtags (“##”) is a comment that adds additonal descitpion or provides different options for the comment. For example, for the t-test here, the first exampe is for the default method, where you are doing a t-test for a difference between two numeric vectors of data values (“x” and “y”). The second example is where you are applying the t-test to a formula instead of two numeric vectors. Until you start doing more advanced statistics, the default method will usually be what you use. Arguments This section breaks down every element in the R code under “Usage” above it and describes what the input is that you need to provide. It also gives you details about the options as well as what the defaults are. For example, for the t-test documentation here, it tells you that “x” is “a (non-empty) numeric vector of data values”. It also tells you that this is what “y” is but not that it tells you that “y” is optional (i.e., you can do a t-test on just one vector of data values). This fact is also shown in the example code where it says “y = NULL”). Note that you often do not have to input ALL the arguments. If you are happy with the defaults you don’t have to type in the code. For example, the description of the argument “alternative” tells you that you can specify whether the alternative hypothesis is two-sided (i.e., two-tailed), or one-tailed, in which case you have to say whether the alternative hypothesis is that the second set of data (e.g., the treatment) are greater or less than the first (e.g., the control). The default is that you are assuming the alternative hypothesis is two-sided. If this is what you want, then your code only needs to look like this t.test(x, y) However, if you want a one-sided test, and your alternate hypothesis is that the treatment (y) is greater than the control (x), then you need to type a bit more code, like this: t.test(x, y, alternative = c(&quot;greater&quot;)) Details This sectin gives you a little more detail (written a bit more like a stats text) about what the function is doing. For more advanced functions, there may be details on the types of inputs allowed and other caveats. This section is really helpful to read closely! Value This section lists the objects (output) created when you execute the command. The relevance of this list will become more clear once you start using R. See Also This section is usually just links to similar commands to the one you are reading up on, or related to it somewhow. These can be useful to explore when doing more complex statistical tests, or if you are not sure which test you should be using. Clicking the link will just take you to the Documentation page for that command, which will be set up exactly the same way as this one. 9 Examples This gives sample code and output. If you have installed the necessary package(s) to run this code, you can just try the code out yourself by typing the code exactly as shown in the example in the Console window of RStudio. It will call data that comes built in with the package when you installed it and can be a helpful way for you to understand how the command is working before you try it with your own data. "],
["data-and-metadata.html", "Chapter 5 Data and metadata", " Chapter 5 Data and metadata Joany will write this section. Maybe we could do a lab meeting or eco-evo to figure out what to do for metadata, i.e., look for good examples. I think look at the Ethan White course. The paper by Kara Woo is quite good and worth a cite. Here we need to provide the rationale for saving data as we recommend we also need to provide the metadata guidelines. Maybe find a paper by someone who is up on this kind of stuff and see how they did the metadata. Also talk about why highlight cells in excel or making borders isn’t a good idea, i.e. tidy data exercise. "],
["entering-data.html", "Chapter 6 Entering data", " Chapter 6 Entering data Good data organization is the foundation of any research project, and this begins with entering and archiving data. There are several reasonable options for data entry, for example: Spreadsheet Text file Database Form (web or GUI databases). In R, you can also input data directly, which can be the right choice if you are working with a small dataset. Here, you will learn how to enter the data from your experiments and save them using R. Let’s start by making table 1 for your report, which we will call solution-concentration-effect-on-potato.csv: table1 &lt;- data.frame(weight = c(&quot;initial&quot;, &quot;final&quot;, &quot;difference&quot;, &quot;percent-change&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato.csv&quot;, row.names = FALSE) In the above code, make sure to replace the NA’s with the values from your experiment. Keep in mind that the values entered into the tables should be decimals greater than or equal to zero, and likely less than 100 since you measured mass in grams and the potato cubes for the experiments were 8 cm3 in size. Notice that we used the file extension “.csv”. CSV stands for comma-separated values, which is a format for tabular data stored in a text file where a comma separates the columns of the data. That is why a comma separates each of the values in the rows for the different solutions. Now, we will make table 2, which includes the class averages and we will call solution-concentration-effect-on-potato-averages.csv: table2 &lt;- data.frame(weight = c(&quot;percent-change&quot;, &quot;minimum-value&quot;, &quot;maximum-value&quot;, &quot;difference&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;, row.names = FALSE) We can load our our data files in CSV format into R using the function read.csv in the following way: data1 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato.csv&quot;) data2 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;) Here, the argument file = of read.csv is the name of the file we want to read. Notice that the filename needs to be a character string, so we put it in quotes. To take a look at our data, we can print then by typing the name and hitting Enter (or Return). data1 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA data2 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA "],
["making-graphs-with-r.html", "Chapter 7 Making graphs with R", " Chapter 7 Making graphs with R Okay, it probably is easy to just do it in base R! In think it’s good to provide link outs to software carpentary or pirates guide to R for these sections. We can make our own text since then we won’t lose it, but at the end give the links. "],
["writing-hypotheses-as-equations.html", "Chapter 8 Writing hypotheses as equations", " Chapter 8 Writing hypotheses as equations "],
["biol-1001-laboratory-2.html", "Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS EXERCISE 1. Intro of RStudio EXERCISE 2. Entering data EXERCISE 3. Discrete independent variable EXERCISE 4. Continuous independent variable Questions", " Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS PURPOSE To become familiarize with R Studio To learn how to record data in electronic format To learn how to write hypotheses as equations To learn how to choose the appropriate visualizations To learn how to make graphs using R Studio Before coming to the laboratory: if you wish to use your own labtop, then install R and RStudio. For instructions see here. insert link Before coming to the laboratory read: In the quant guide: Sections In the printed lab manual: Appendix II: Something or other Intro to R Entering data exercise. Identify relevant data. Data should be discrete with at least 3 groups. Export from R as .csv, write metadata. Submit to dropbox. Plot data to replicate a bar chart. Replot as box plot. Save in .pdf or related format. Practice writing hypothesis, prediction, and equation (i.e., equation is means of groups not equal in notation). Repeat plotting for data with continuous independent variable. Practice writing equation for data with continuous independent variable. Repeat plotting for data with continuous independent variable. Practice writing equation for data with continuous independent variable. Note to instructors/developers. Design these activities to take 20-30 mins. EXERCISE 1. Intro of RStudio Maybe borrow a little exercise from software carpentary. Nothing to hand in assess? EXERCISE 2. Entering data Joany will type data table here. Ask students to follow the enter data instructions in the sections of this manual. Question When they are finished submit the .csv and metadata to the Biology Data Repository on BrightSpace EXERCISE 3. Discrete independent variable Make a graph Plot data to replicate a bar chart from Campbell book. Replot as box plot. Save in .pdf or related format. Provide links to relevant section of this manual. Write the hypothesis as an equation Link to relevant section of this manual. Question Print the graph and hand it in. Following the 1001 lab manual instructions for figures. Hand in your equations. EXERCISE 4. Continuous independent variable Make a graph Line graph Write the hypothesis as an equation Question Print the graph and hand it in. Hand in your equations. Question Print the graph and hand it in. Questions AH: in the 1001 lab manual, generally it seems that questions are interspersed with EXERCISES. What Yolanda wrote below should be interspersed above. In the bar graph, what can you tell about the stomatal openings of the treatment plant vs. the control plants? Is it consistent across all the individual plants? Label the following on the box plot (mean, 25% and 75% quantiles, 95% confidence limits, outliers). What does the box plot tell you about the differences between the treatment plants (plants 6-11) vs. the control plants that the treatment plant does not? Why do you think a scientist might choose to represent these data one way over another? "],
["references.html", "References", " References "]
]
